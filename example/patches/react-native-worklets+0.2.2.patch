diff --git a/node_modules/react-native-worklets/cpp/JsiWorkletContext.cpp b/node_modules/react-native-worklets/cpp/JsiWorkletContext.cpp
index e4cc7ba..3f64ed7 100644
--- a/node_modules/react-native-worklets/cpp/JsiWorkletContext.cpp
+++ b/node_modules/react-native-worklets/cpp/JsiWorkletContext.cpp
@@ -156,7 +156,9 @@ void JsiWorkletContext::addDecorator(
     std::shared_ptr<JsiBaseDecorator> decorator) {
   decorators.push_back(decorator);
   // decorate default context
-  JsiWorkletContext::getDefaultInstance()->decorate(decorator);
+  if (JsiWorkletContext::getDefaultInstance()->_workletCallInvoker) {
+    JsiWorkletContext::getDefaultInstance()->decorate(decorator);
+  }
 }
 
 template <typename... Args> void JsiWorkletContext::decorate(Args &&...args) {
diff --git a/node_modules/react-native-worklets/src/plugin/index.js b/node_modules/react-native-worklets/src/plugin/index.js
index 82809e4..fc1dd95 100644
--- a/node_modules/react-native-worklets/src/plugin/index.js
+++ b/node_modules/react-native-worklets/src/plugin/index.js
@@ -8,7 +8,7 @@ const convertSourceMap = require("convert-source-map");
 /**
  * holds a map of function names as keys and array of argument indexes as values which should be automatically workletized(they have to be functions)(starting from 0)
  */
-const functionArgsToWorkletize = new Map([]);
+const functionArgsToWorkletize = new Map([['useTemplateValue', [0]]]);
 
 const objectHooks = new Set([]);
 
